#include "Asset.h"
#include "RobinAPI.h"

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetId
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetId() const
{
  return Id;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetName
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetName() const
{
  return Name;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetSymbol
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetSymbol() const
{
  return Symbol;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetURL
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetURL() const
{
  return URL;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetBidPrice
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetBidPrice() const
{
  if (0 == BidPrice.length())
  {
    return "0.0";
  }

  return BidPrice;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetAskPrice
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetAskPrice() const
{
  if (0 == AskPrice.length())
  {
    return "0.0";
  }

  return AskPrice;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetBidSize
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetBidSize() const
{
  return BidSize;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetAskSize
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetAskSize() const
{
  return AskSize;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetLastTradePrice
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetLastTradePrice() const
{
  return LastTradePrice;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetPreviousClose
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::string Asset::GetPreviousClose() const
{
  return PreviousClose;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetQuantity
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
float Asset::GetQuantity() const
{
  return Quantity;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetAveragePrice
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
float Asset::GetAveragePrice() const
{
  return AverageBuyPrice;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  SetSimulationDelta
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
void Asset::SetSimulationDelta(float delta)
{
  SimulationDelta = delta;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetHistory
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
std::vector<Asset::HistoricalEntry>* Asset::GetHistory()
{
  return &History;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  GetHistory
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
RobinConstants::StatusType Asset::Refresh()
{
  // After building the historical data, check the value against price alerts.
  // Send the user a notification if warranted.
  if (nullptr != RobinAPI::AlertCallback)
  {
    RobinAPI::PriceAlertEntry* alert = RobinAPI::GetPriceAlert(Symbol);
    if (nullptr != alert)
    {
      float price = stof(LastTradePrice);

      // Check against min first.
      if (0.0f != alert->min)
      {
        if ((price <= alert->min) &&
            (true == alert->minReady))
        {
          std::string message = alert->symbol + " fell below target " +
            std::to_string(alert->min);
          reinterpret_cast<void(*)(const char*)>
            (RobinAPI::AlertCallback)(message.c_str());
          (*alert).minReady = false;
        }
        else if ((price > alert->min) &&
                 (false == alert->minReady))
        {
          // Reset alert toggle
          (*alert).minReady = true;
        }
      }

      // Check against max next.
      if (0.0f != alert->max)
      {
        if ((price >= alert->max) &&
          (true == alert->maxReady))
        {
          std::string message = alert->symbol + " exceeded target " +
            std::to_string(alert->max);
          reinterpret_cast<void(*)(const char*)>
            (RobinAPI::AlertCallback)(message.c_str());
          (*alert).maxReady = false;
        }
        else if ((price < alert->max) &&
          (false == alert->maxReady))
        {
          // Reset alert toggle
          (*alert).maxReady = true;
        }
      }
    }
  }

  return RobinConstants::STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  Update
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
void Asset::Update(float quantity, float price)
{
  Quantity = quantity;
  AverageBuyPrice = price;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  Constructor
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
Asset::Asset() :
  SimulationDelta(0.0f)
{
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Function:  Destructor
//  Notes:     None
//
/////////////////////////////////////////////////////////////////////////////////////////
Asset::~Asset()
{
}
